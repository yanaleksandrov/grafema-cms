@function str-split($string, $separator) {
  $i: str-index($string, $separator);
  @if $i != null {
    @return str-insert(str-slice($string, 1, 1), str-slice(str-split(str-slice($string, $i + str-length($separator)), $separator), 1, 1), 100);
  }
  @return str-slice($string, 1, 1);
}

// display
@each $key in ( flex, inline-flex, block, inline-block, table, inline-table, grid, inline-grid ) {
  $selector: str-split($key, '-');
  .d#{$selector} {
    display: $key;

    @if $key == flex or $key == grid {
      gap: 0;
      align-content: start;
    }
  }
}

// align-items
@each $key in ( stretch, center, flex-start, flex-end, baseline ) {
  $selector: str-split($key, '-');
  .ai#{$selector} {
    align-items: $key;
  }
}

// justify-content
@each $key in ( center, flex-start, flex-end, space-between, space-around, space-evenly ) {
  $selector: str-split($key, '-');
  .jc#{$selector} {
    justify-content: $key;
  }
}

// flex-direction
@each $key in ( column, column-reverse, row, row-reverse ) {
  $selector: str-split($key, '-');
  .fd#{$selector} {
    flex-direction: $key;
  }
}

// flex-wrap
@each $key in ( wrap, nowrap, wrap-reverse ) {
  $selector: str-split($key, '-');
  .fw#{$selector} {
    flex-wrap: $key;
  }
}

// font-weight
@for $i from 1 through 9 {
  .fw-#{$i}00 {
    font-weight: #{$i}00;
  }
}

// font-size
@each $size in (96, 64, 48, 40, 32, 24, 18, 16, 15, 14, 13, 12) {
  .fs-#{$size} {
    font-size: #{calc($size / 16)}rem;
  }
}

// line-height
@each $size, $value in (
  'xl': 1.6,
  'lg': 1.5,
  'md': 1.4,
  'sm': 1.3,
  'xs': 1.2,
) {
  .lh-#{$size} {
    line-height: #{$value}em;
  }
}

// text-align
@each $key in ( start, end, center ) {
  .t-#{$key} {
    text-align: $key;
  }
}

// colors
$colors: (
  dark: #151d26,
  muted: #71777F,
  telegrey: #8E8E8E,
  milky: #ffffff,
  magent: #d6336c,
  reddish: #d63939,
  amber: #f76707,
  melon: #f59f00,
  irish: #74b816,
  herbal: #2fb344,
  royal: #4299e1,
  sky: #206bc4,
  purplish: #6a20c5,
);
@each $name, $color in $colors {
  .t-#{$name} {
    color: $color !important;
  }
  .t-#{$name}-lt {
    color: #{$color}11 !important;
  }
}
@each $name, $color in $colors {
  .bg-#{$name} {
    background-color: $color !important;

    @if $color != #ffffff {
      color: #fff;
    }
  }
  .bg-#{$name}-lt {
    background-color: #{mix(white, $color, 93%)} !important;

    @if $color != #ffffff {
      color: #{$color};
    }
  }
}

.mw {
  max-width: 100%;
  width: 100%;
}
@each $size in (40, 80, 120, 160, 200, 240, 280, 320, 360, 400, 600, 800, 1000, 1200, 1400, 1600) {
  .mw-#{$size} {
    max-width: #{calc($size / 16)}rem;
    width: 100%;
  }
}

// styles for width, gap, paddings & margins
@each $size, $width in (
  '': '9999',
  'lg': '1279',
  'md': '1024',
  'sm': '640',
) {
  @media(max-width: #{$width}px) {
    @each $selector, $property in (
      'gtc': 'grid-template-columns',
      'ga': 'grid-area',
      'g': 'gap',
      'm': 'margin',
      'mt': 'margin-top',
      'mr': 'margin-inline-end',
      'mb': 'margin-bottom',
      'ml': 'margin-inline-start',
      'mx': 'margin-inline',
      'my': 'margin-block',
      'p': 'padding',
      'pt': 'padding-top',
      'pr': 'padding-inline-end',
      'pb': 'padding-bottom',
      'pl': 'padding-inline-start',
      'px': 'padding-inline',
      'py': 'padding-block',
    ) {
      $loop: 8;
      $prefix: $size;
      $letter: str-slice($selector, 1, 1);

      @if $selector == w or $selector == gtc or $selector == ga {
        $loop: 12;
      }

      @for $i from 0 through $loop {
        $value: #{$i * 0.25}rem;

        @if $size != '' {
          $prefix: #{$size}\:;
        }

        // add "auto" value for "margin"s properties
        @if $i == 0 {
          @if $letter != p and $letter != g {
            .#{$prefix}#{$selector}-auto {
              #{$property}: auto;
            }
          }
          $value: #{$i * 0.25};
        }

        @if $selector == gtc {
          $value: repeat(#{$i}, 1fr);
        }

        @if $selector == ga {
          $value: span 1 / span #{$i};
        }

        // styles output
        @if $value != 0% {
          .#{$prefix}#{$selector}-#{$i} {
            #{$property}: $value;
          }
        }
      }
    }
  }
}
